
LAB3_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002afc  08002afc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002afc  08002afc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000060  08002b64  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002b64  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098f6  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b03  00000000  00000000  0002997f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d19  00000000  00000000  0002c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba98  00000000  00000000  00043581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008255c  00000000  00000000  0004f019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000d15c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ac0 	.word	0x08002ac0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002ac0 	.word	0x08002ac0

0800014c <is_pressed>:
int state_of_button[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON - 1] = BUTTON_RELEASED};

int flag_for_pressed[NUMBER_OF_BUTTON] = {0};
int flag_for_pressed_3s[NUMBER_OF_BUTTON] = {0};

int is_pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(index > NUMBER_OF_BUTTON) return 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	dd01      	ble.n	800015e <is_pressed+0x12>
 800015a:	2300      	movs	r3, #0
 800015c:	e00d      	b.n	800017a <is_pressed+0x2e>
	if(flag_for_pressed[index]){
 800015e:	4a09      	ldr	r2, [pc, #36]	; (8000184 <is_pressed+0x38>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d006      	beq.n	8000178 <is_pressed+0x2c>
		flag_for_pressed[index] = 0;
 800016a:	4a06      	ldr	r2, [pc, #24]	; (8000184 <is_pressed+0x38>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2100      	movs	r1, #0
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <is_pressed+0x2e>
	}
	return 0;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	2000007c 	.word	0x2000007c

08000188 <read_input>:

int register0_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register1_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register2_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int button_buffer[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
void read_input(){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e05d      	b.n	8000250 <read_input+0xc8>
		register0_key[i] = register1_key[i];
 8000194:	4a32      	ldr	r2, [pc, #200]	; (8000260 <read_input+0xd8>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	4931      	ldr	r1, [pc, #196]	; (8000264 <read_input+0xdc>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		register1_key[i] = register2_key[i];
 80001a4:	4a30      	ldr	r2, [pc, #192]	; (8000268 <read_input+0xe0>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	492c      	ldr	r1, [pc, #176]	; (8000260 <read_input+0xd8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i){
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b02      	cmp	r3, #2
 80001b8:	d01f      	beq.n	80001fa <read_input+0x72>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b02      	cmp	r3, #2
 80001be:	dc27      	bgt.n	8000210 <read_input+0x88>
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d003      	beq.n	80001ce <read_input+0x46>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d00b      	beq.n	80001e4 <read_input+0x5c>
			break;
		case 2:
			register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON2_Pin);
			break;
		default:
			break;
 80001cc:	e020      	b.n	8000210 <read_input+0x88>
			 register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON0_Pin);
 80001ce:	2101      	movs	r1, #1
 80001d0:	4826      	ldr	r0, [pc, #152]	; (800026c <read_input+0xe4>)
 80001d2:	f001 fc3d 	bl	8001a50 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a23      	ldr	r2, [pc, #140]	; (8000268 <read_input+0xe0>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001e2:	e016      	b.n	8000212 <read_input+0x8a>
			register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON1_Pin);
 80001e4:	2102      	movs	r1, #2
 80001e6:	4821      	ldr	r0, [pc, #132]	; (800026c <read_input+0xe4>)
 80001e8:	f001 fc32 	bl	8001a50 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <read_input+0xe0>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001f8:	e00b      	b.n	8000212 <read_input+0x8a>
			register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON2_Pin);
 80001fa:	2104      	movs	r1, #4
 80001fc:	481b      	ldr	r0, [pc, #108]	; (800026c <read_input+0xe4>)
 80001fe:	f001 fc27 	bl	8001a50 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	4619      	mov	r1, r3
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <read_input+0xe0>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800020e:	e000      	b.n	8000212 <read_input+0x8a>
			break;
 8000210:	bf00      	nop
		}
		if(register0_key[i] == register1_key[i] && register1_key[i] == register2_key[i]){
 8000212:	4a14      	ldr	r2, [pc, #80]	; (8000264 <read_input+0xdc>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4911      	ldr	r1, [pc, #68]	; (8000260 <read_input+0xd8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d111      	bne.n	800024a <read_input+0xc2>
 8000226:	4a0e      	ldr	r2, [pc, #56]	; (8000260 <read_input+0xd8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	490e      	ldr	r1, [pc, #56]	; (8000268 <read_input+0xe0>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d107      	bne.n	800024a <read_input+0xc2>
			button_buffer[i] = register2_key[i];
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <read_input+0xe0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000242:	490b      	ldr	r1, [pc, #44]	; (8000270 <read_input+0xe8>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3301      	adds	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b02      	cmp	r3, #2
 8000254:	dd9e      	ble.n	8000194 <read_input+0xc>
		}
	}
}
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000018 	.word	0x20000018
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000024 	.word	0x20000024
 800026c:	40010c00 	.word	0x40010c00
 8000270:	20000030 	.word	0x20000030

08000274 <fsm_for_button>:

void fsm_for_button(){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	e057      	b.n	8000330 <fsm_for_button+0xbc>
		switch(state_of_button[i]){
 8000280:	4a2f      	ldr	r2, [pc, #188]	; (8000340 <fsm_for_button+0xcc>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000288:	2b16      	cmp	r3, #22
 800028a:	d03b      	beq.n	8000304 <fsm_for_button+0x90>
 800028c:	2b16      	cmp	r3, #22
 800028e:	dc45      	bgt.n	800031c <fsm_for_button+0xa8>
 8000290:	2b14      	cmp	r3, #20
 8000292:	d002      	beq.n	800029a <fsm_for_button+0x26>
 8000294:	2b15      	cmp	r3, #21
 8000296:	d016      	beq.n	80002c6 <fsm_for_button+0x52>
			if(button_buffer[i] == BUTTON_IS_RELEASED){
				state_of_button[i] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000298:	e040      	b.n	800031c <fsm_for_button+0xa8>
			if(button_buffer[i] == BUTTON_IS_PRESSED){
 800029a:	4a2a      	ldr	r2, [pc, #168]	; (8000344 <fsm_for_button+0xd0>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d13c      	bne.n	8000320 <fsm_for_button+0xac>
				flag_for_pressed[i] = 1;
 80002a6:	4a28      	ldr	r2, [pc, #160]	; (8000348 <fsm_for_button+0xd4>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				set_timer(i, 3000);
 80002b0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f000 fd39 	bl	8000d2c <set_timer>
				state_of_button[i] = BUTTON_PRESSED;
 80002ba:	4a21      	ldr	r2, [pc, #132]	; (8000340 <fsm_for_button+0xcc>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2115      	movs	r1, #21
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002c4:	e02c      	b.n	8000320 <fsm_for_button+0xac>
			if(is_timer_timeout(i)){
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 fd8a 	bl	8000de0 <is_timer_timeout>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d009      	beq.n	80002e6 <fsm_for_button+0x72>
				flag_for_pressed_3s[i] = 1;
 80002d2:	4a1e      	ldr	r2, [pc, #120]	; (800034c <fsm_for_button+0xd8>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2101      	movs	r1, #1
 80002d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				state_of_button[i] = BUTTON_PRESSED_3S;
 80002dc:	4a18      	ldr	r2, [pc, #96]	; (8000340 <fsm_for_button+0xcc>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2116      	movs	r1, #22
 80002e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 80002e6:	4a17      	ldr	r2, [pc, #92]	; (8000344 <fsm_for_button+0xd0>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d118      	bne.n	8000324 <fsm_for_button+0xb0>
				clear_timer(i);
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f000 fd48 	bl	8000d88 <clear_timer>
				state_of_button[i] = BUTTON_RELEASED;
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <fsm_for_button+0xcc>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2114      	movs	r1, #20
 80002fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000302:	e00f      	b.n	8000324 <fsm_for_button+0xb0>
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <fsm_for_button+0xd0>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d10b      	bne.n	8000328 <fsm_for_button+0xb4>
				state_of_button[i] = BUTTON_RELEASED;
 8000310:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <fsm_for_button+0xcc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2114      	movs	r1, #20
 8000316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800031a:	e005      	b.n	8000328 <fsm_for_button+0xb4>
			break;
 800031c:	bf00      	nop
 800031e:	e004      	b.n	800032a <fsm_for_button+0xb6>
			break;
 8000320:	bf00      	nop
 8000322:	e002      	b.n	800032a <fsm_for_button+0xb6>
			break;
 8000324:	bf00      	nop
 8000326:	e000      	b.n	800032a <fsm_for_button+0xb6>
			break;
 8000328:	bf00      	nop
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3301      	adds	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	dda4      	ble.n	8000280 <fsm_for_button+0xc>

		}
	}
}
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000000 	.word	0x20000000
 8000344:	20000030 	.word	0x20000030
 8000348:	2000007c 	.word	0x2000007c
 800034c:	20000088 	.word	0x20000088

08000350 <turn_on_led_7seg>:
#include "led_7_seg.h"

int led_7_seg_buffer[4] = {0};
int index_led_7_seg = 0;

void turn_on_led_7seg(int index){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b03      	cmp	r3, #3
 800035c:	d85e      	bhi.n	800041c <turn_on_led_7seg+0xcc>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <turn_on_led_7seg+0x14>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	08000375 	.word	0x08000375
 8000368:	0800039f 	.word	0x0800039f
 800036c:	080003c9 	.word	0x080003c9
 8000370:	080003f3 	.word	0x080003f3
	switch(index){
	case 0:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2108      	movs	r1, #8
 8000378:	4835      	ldr	r0, [pc, #212]	; (8000450 <turn_on_led_7seg+0x100>)
 800037a:	f001 fb80 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2110      	movs	r1, #16
 8000382:	4833      	ldr	r0, [pc, #204]	; (8000450 <turn_on_led_7seg+0x100>)
 8000384:	f001 fb7b 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2120      	movs	r1, #32
 800038c:	4830      	ldr	r0, [pc, #192]	; (8000450 <turn_on_led_7seg+0x100>)
 800038e:	f001 fb76 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2140      	movs	r1, #64	; 0x40
 8000396:	482e      	ldr	r0, [pc, #184]	; (8000450 <turn_on_led_7seg+0x100>)
 8000398:	f001 fb71 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 800039c:	e053      	b.n	8000446 <turn_on_led_7seg+0xf6>
	case 1:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	2108      	movs	r1, #8
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <turn_on_led_7seg+0x100>)
 80003a4:	f001 fb6b 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	4828      	ldr	r0, [pc, #160]	; (8000450 <turn_on_led_7seg+0x100>)
 80003ae:	f001 fb66 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2120      	movs	r1, #32
 80003b6:	4826      	ldr	r0, [pc, #152]	; (8000450 <turn_on_led_7seg+0x100>)
 80003b8:	f001 fb61 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	4823      	ldr	r0, [pc, #140]	; (8000450 <turn_on_led_7seg+0x100>)
 80003c2:	f001 fb5c 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 80003c6:	e03e      	b.n	8000446 <turn_on_led_7seg+0xf6>
	case 2:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	4820      	ldr	r0, [pc, #128]	; (8000450 <turn_on_led_7seg+0x100>)
 80003ce:	f001 fb56 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2110      	movs	r1, #16
 80003d6:	481e      	ldr	r0, [pc, #120]	; (8000450 <turn_on_led_7seg+0x100>)
 80003d8:	f001 fb51 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	481b      	ldr	r0, [pc, #108]	; (8000450 <turn_on_led_7seg+0x100>)
 80003e2:	f001 fb4c 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	4819      	ldr	r0, [pc, #100]	; (8000450 <turn_on_led_7seg+0x100>)
 80003ec:	f001 fb47 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 80003f0:	e029      	b.n	8000446 <turn_on_led_7seg+0xf6>
	case 3:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2108      	movs	r1, #8
 80003f6:	4816      	ldr	r0, [pc, #88]	; (8000450 <turn_on_led_7seg+0x100>)
 80003f8:	f001 fb41 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	4813      	ldr	r0, [pc, #76]	; (8000450 <turn_on_led_7seg+0x100>)
 8000402:	f001 fb3c 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2120      	movs	r1, #32
 800040a:	4811      	ldr	r0, [pc, #68]	; (8000450 <turn_on_led_7seg+0x100>)
 800040c:	f001 fb37 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	480e      	ldr	r0, [pc, #56]	; (8000450 <turn_on_led_7seg+0x100>)
 8000416:	f001 fb32 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 800041a:	e014      	b.n	8000446 <turn_on_led_7seg+0xf6>
	default:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2108      	movs	r1, #8
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <turn_on_led_7seg+0x100>)
 8000422:	f001 fb2c 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2110      	movs	r1, #16
 800042a:	4809      	ldr	r0, [pc, #36]	; (8000450 <turn_on_led_7seg+0x100>)
 800042c:	f001 fb27 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2120      	movs	r1, #32
 8000434:	4806      	ldr	r0, [pc, #24]	; (8000450 <turn_on_led_7seg+0x100>)
 8000436:	f001 fb22 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2140      	movs	r1, #64	; 0x40
 800043e:	4804      	ldr	r0, [pc, #16]	; (8000450 <turn_on_led_7seg+0x100>)
 8000440:	f001 fb1d 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 8000444:	bf00      	nop
	}
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010c00 	.word	0x40010c00

08000454 <display_led_7seg>:

void display_led_7seg(int number){
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b09      	cmp	r3, #9
 8000460:	f200 81b2 	bhi.w	80007c8 <display_led_7seg+0x374>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <display_led_7seg+0x18>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	08000495 	.word	0x08000495
 8000470:	080004e7 	.word	0x080004e7
 8000474:	08000539 	.word	0x08000539
 8000478:	0800058b 	.word	0x0800058b
 800047c:	080005dd 	.word	0x080005dd
 8000480:	0800062f 	.word	0x0800062f
 8000484:	08000681 	.word	0x08000681
 8000488:	080006d3 	.word	0x080006d3
 800048c:	08000725 	.word	0x08000725
 8000490:	08000777 	.word	0x08000777
	switch(number){
	case 0:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	48ce      	ldr	r0, [pc, #824]	; (80007d4 <display_led_7seg+0x380>)
 800049a:	f001 faf0 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	48cc      	ldr	r0, [pc, #816]	; (80007d4 <display_led_7seg+0x380>)
 80004a4:	f001 faeb 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	48c9      	ldr	r0, [pc, #804]	; (80007d4 <display_led_7seg+0x380>)
 80004b0:	f001 fae5 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ba:	48c6      	ldr	r0, [pc, #792]	; (80007d4 <display_led_7seg+0x380>)
 80004bc:	f001 fadf 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c6:	48c3      	ldr	r0, [pc, #780]	; (80007d4 <display_led_7seg+0x380>)
 80004c8:	f001 fad9 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d2:	48c0      	ldr	r0, [pc, #768]	; (80007d4 <display_led_7seg+0x380>)
 80004d4:	f001 fad3 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	48bd      	ldr	r0, [pc, #756]	; (80007d4 <display_led_7seg+0x380>)
 80004e0:	f001 facd 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 80004e4:	e171      	b.n	80007ca <display_led_7seg+0x376>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	48ba      	ldr	r0, [pc, #744]	; (80007d4 <display_led_7seg+0x380>)
 80004ec:	f001 fac7 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	48b7      	ldr	r0, [pc, #732]	; (80007d4 <display_led_7seg+0x380>)
 80004f6:	f001 fac2 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	48b4      	ldr	r0, [pc, #720]	; (80007d4 <display_led_7seg+0x380>)
 8000502:	f001 fabc 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	48b1      	ldr	r0, [pc, #708]	; (80007d4 <display_led_7seg+0x380>)
 800050e:	f001 fab6 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	48ae      	ldr	r0, [pc, #696]	; (80007d4 <display_led_7seg+0x380>)
 800051a:	f001 fab0 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000524:	48ab      	ldr	r0, [pc, #684]	; (80007d4 <display_led_7seg+0x380>)
 8000526:	f001 faaa 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	48a8      	ldr	r0, [pc, #672]	; (80007d4 <display_led_7seg+0x380>)
 8000532:	f001 faa4 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 8000536:	e148      	b.n	80007ca <display_led_7seg+0x376>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	48a5      	ldr	r0, [pc, #660]	; (80007d4 <display_led_7seg+0x380>)
 800053e:	f001 fa9e 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	48a3      	ldr	r0, [pc, #652]	; (80007d4 <display_led_7seg+0x380>)
 8000548:	f001 fa99 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	48a0      	ldr	r0, [pc, #640]	; (80007d4 <display_led_7seg+0x380>)
 8000554:	f001 fa93 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	489d      	ldr	r0, [pc, #628]	; (80007d4 <display_led_7seg+0x380>)
 8000560:	f001 fa8d 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056a:	489a      	ldr	r0, [pc, #616]	; (80007d4 <display_led_7seg+0x380>)
 800056c:	f001 fa87 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000576:	4897      	ldr	r0, [pc, #604]	; (80007d4 <display_led_7seg+0x380>)
 8000578:	f001 fa81 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	4894      	ldr	r0, [pc, #592]	; (80007d4 <display_led_7seg+0x380>)
 8000584:	f001 fa7b 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 8000588:	e11f      	b.n	80007ca <display_led_7seg+0x376>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	4891      	ldr	r0, [pc, #580]	; (80007d4 <display_led_7seg+0x380>)
 8000590:	f001 fa75 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	488e      	ldr	r0, [pc, #568]	; (80007d4 <display_led_7seg+0x380>)
 800059a:	f001 fa70 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	488b      	ldr	r0, [pc, #556]	; (80007d4 <display_led_7seg+0x380>)
 80005a6:	f001 fa6a 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b0:	4888      	ldr	r0, [pc, #544]	; (80007d4 <display_led_7seg+0x380>)
 80005b2:	f001 fa64 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005bc:	4885      	ldr	r0, [pc, #532]	; (80007d4 <display_led_7seg+0x380>)
 80005be:	f001 fa5e 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c8:	4882      	ldr	r0, [pc, #520]	; (80007d4 <display_led_7seg+0x380>)
 80005ca:	f001 fa58 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d4:	487f      	ldr	r0, [pc, #508]	; (80007d4 <display_led_7seg+0x380>)
 80005d6:	f001 fa52 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 80005da:	e0f6      	b.n	80007ca <display_led_7seg+0x376>
	case 4:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	487c      	ldr	r0, [pc, #496]	; (80007d4 <display_led_7seg+0x380>)
 80005e2:	f001 fa4c 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	487a      	ldr	r0, [pc, #488]	; (80007d4 <display_led_7seg+0x380>)
 80005ec:	f001 fa47 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f6:	4877      	ldr	r0, [pc, #476]	; (80007d4 <display_led_7seg+0x380>)
 80005f8:	f001 fa41 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000602:	4874      	ldr	r0, [pc, #464]	; (80007d4 <display_led_7seg+0x380>)
 8000604:	f001 fa3b 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	4871      	ldr	r0, [pc, #452]	; (80007d4 <display_led_7seg+0x380>)
 8000610:	f001 fa35 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	486e      	ldr	r0, [pc, #440]	; (80007d4 <display_led_7seg+0x380>)
 800061c:	f001 fa2f 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	486b      	ldr	r0, [pc, #428]	; (80007d4 <display_led_7seg+0x380>)
 8000628:	f001 fa29 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 800062c:	e0cd      	b.n	80007ca <display_led_7seg+0x376>
	case 5:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4868      	ldr	r0, [pc, #416]	; (80007d4 <display_led_7seg+0x380>)
 8000634:	f001 fa23 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	4865      	ldr	r0, [pc, #404]	; (80007d4 <display_led_7seg+0x380>)
 800063e:	f001 fa1e 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4862      	ldr	r0, [pc, #392]	; (80007d4 <display_led_7seg+0x380>)
 800064a:	f001 fa18 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	485f      	ldr	r0, [pc, #380]	; (80007d4 <display_led_7seg+0x380>)
 8000656:	f001 fa12 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	485c      	ldr	r0, [pc, #368]	; (80007d4 <display_led_7seg+0x380>)
 8000662:	f001 fa0c 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	4859      	ldr	r0, [pc, #356]	; (80007d4 <display_led_7seg+0x380>)
 800066e:	f001 fa06 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4856      	ldr	r0, [pc, #344]	; (80007d4 <display_led_7seg+0x380>)
 800067a:	f001 fa00 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 800067e:	e0a4      	b.n	80007ca <display_led_7seg+0x376>
	case 6:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4853      	ldr	r0, [pc, #332]	; (80007d4 <display_led_7seg+0x380>)
 8000686:	f001 f9fa 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4851      	ldr	r0, [pc, #324]	; (80007d4 <display_led_7seg+0x380>)
 8000690:	f001 f9f5 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	484e      	ldr	r0, [pc, #312]	; (80007d4 <display_led_7seg+0x380>)
 800069c:	f001 f9ef 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	484b      	ldr	r0, [pc, #300]	; (80007d4 <display_led_7seg+0x380>)
 80006a8:	f001 f9e9 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	4848      	ldr	r0, [pc, #288]	; (80007d4 <display_led_7seg+0x380>)
 80006b4:	f001 f9e3 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006be:	4845      	ldr	r0, [pc, #276]	; (80007d4 <display_led_7seg+0x380>)
 80006c0:	f001 f9dd 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4842      	ldr	r0, [pc, #264]	; (80007d4 <display_led_7seg+0x380>)
 80006cc:	f001 f9d7 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 80006d0:	e07b      	b.n	80007ca <display_led_7seg+0x376>
	case 7:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	483f      	ldr	r0, [pc, #252]	; (80007d4 <display_led_7seg+0x380>)
 80006d8:	f001 f9d1 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	483c      	ldr	r0, [pc, #240]	; (80007d4 <display_led_7seg+0x380>)
 80006e2:	f001 f9cc 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	4839      	ldr	r0, [pc, #228]	; (80007d4 <display_led_7seg+0x380>)
 80006ee:	f001 f9c6 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4836      	ldr	r0, [pc, #216]	; (80007d4 <display_led_7seg+0x380>)
 80006fa:	f001 f9c0 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000704:	4833      	ldr	r0, [pc, #204]	; (80007d4 <display_led_7seg+0x380>)
 8000706:	f001 f9ba 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000710:	4830      	ldr	r0, [pc, #192]	; (80007d4 <display_led_7seg+0x380>)
 8000712:	f001 f9b4 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <display_led_7seg+0x380>)
 800071e:	f001 f9ae 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 8000722:	e052      	b.n	80007ca <display_led_7seg+0x376>
	case 8:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <display_led_7seg+0x380>)
 800072a:	f001 f9a8 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	4828      	ldr	r0, [pc, #160]	; (80007d4 <display_led_7seg+0x380>)
 8000734:	f001 f9a3 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	4825      	ldr	r0, [pc, #148]	; (80007d4 <display_led_7seg+0x380>)
 8000740:	f001 f99d 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4822      	ldr	r0, [pc, #136]	; (80007d4 <display_led_7seg+0x380>)
 800074c:	f001 f997 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000756:	481f      	ldr	r0, [pc, #124]	; (80007d4 <display_led_7seg+0x380>)
 8000758:	f001 f991 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000762:	481c      	ldr	r0, [pc, #112]	; (80007d4 <display_led_7seg+0x380>)
 8000764:	f001 f98b 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <display_led_7seg+0x380>)
 8000770:	f001 f985 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 8000774:	e029      	b.n	80007ca <display_led_7seg+0x376>
	case 9:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	4816      	ldr	r0, [pc, #88]	; (80007d4 <display_led_7seg+0x380>)
 800077c:	f001 f97f 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <display_led_7seg+0x380>)
 8000786:	f001 f97a 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	4810      	ldr	r0, [pc, #64]	; (80007d4 <display_led_7seg+0x380>)
 8000792:	f001 f974 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <display_led_7seg+0x380>)
 800079e:	f001 f96e 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <display_led_7seg+0x380>)
 80007aa:	f001 f968 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <display_led_7seg+0x380>)
 80007b6:	f001 f962 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <display_led_7seg+0x380>)
 80007c2:	f001 f95c 	bl	8001a7e <HAL_GPIO_WritePin>
		break;
 80007c6:	e000      	b.n	80007ca <display_led_7seg+0x376>
	default:
		break;
 80007c8:	bf00      	nop
	}
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010800 	.word	0x40010800

080007d8 <update_2_buffer_led_7seg_left>:

void update_2_buffer_led_7seg_left(int number1){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
		led_7_seg_buffer[0] = (number1/1000)/10;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <update_2_buffer_led_7seg_left+0x4c>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1312      	asrs	r2, r2, #12
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <update_2_buffer_led_7seg_left+0x50>)
 80007f0:	6013      	str	r3, [r2, #0]
		led_7_seg_buffer[1] = (number1/1000)%10;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <update_2_buffer_led_7seg_left+0x54>)
 80007f6:	fb82 1203 	smull	r1, r2, r2, r3
 80007fa:	1192      	asrs	r2, r2, #6
 80007fc:	17db      	asrs	r3, r3, #31
 80007fe:	1ad1      	subs	r1, r2, r3
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <update_2_buffer_led_7seg_left+0x58>)
 8000802:	fb83 2301 	smull	r2, r3, r3, r1
 8000806:	109a      	asrs	r2, r3, #2
 8000808:	17cb      	asrs	r3, r1, #31
 800080a:	1ad2      	subs	r2, r2, r3
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	1aca      	subs	r2, r1, r3
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <update_2_buffer_led_7seg_left+0x50>)
 8000818:	605a      	str	r2, [r3, #4]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	68db8bad 	.word	0x68db8bad
 8000828:	20000098 	.word	0x20000098
 800082c:	10624dd3 	.word	0x10624dd3
 8000830:	66666667 	.word	0x66666667

08000834 <update_2_buffer_led_7seg_right>:
void update_2_buffer_led_7seg_right(int number2){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
		led_7_seg_buffer[2] =( number2/1000)/10;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <update_2_buffer_led_7seg_right+0x4c>)
 8000840:	fb82 1203 	smull	r1, r2, r2, r3
 8000844:	1312      	asrs	r2, r2, #12
 8000846:	17db      	asrs	r3, r3, #31
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <update_2_buffer_led_7seg_right+0x50>)
 800084c:	6093      	str	r3, [r2, #8]
		led_7_seg_buffer[3] = ( number2/1000)%10;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <update_2_buffer_led_7seg_right+0x54>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1192      	asrs	r2, r2, #6
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad1      	subs	r1, r2, r3
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <update_2_buffer_led_7seg_right+0x58>)
 800085e:	fb83 2301 	smull	r2, r3, r3, r1
 8000862:	109a      	asrs	r2, r3, #2
 8000864:	17cb      	asrs	r3, r1, #31
 8000866:	1ad2      	subs	r2, r2, r3
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	1aca      	subs	r2, r1, r3
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <update_2_buffer_led_7seg_right+0x50>)
 8000874:	60da      	str	r2, [r3, #12]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	68db8bad 	.word	0x68db8bad
 8000884:	20000098 	.word	0x20000098
 8000888:	10624dd3 	.word	0x10624dd3
 800088c:	66666667 	.word	0x66666667

08000890 <led_7seg_run>:
void led_7seg_run(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	// enable the ENi pin ( when index = 0, EN0 = RESET ...);
	turn_on_led_7seg(index_led_7_seg);
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <led_7seg_run+0x48>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd59 	bl	8000350 <turn_on_led_7seg>
	display_led_7seg(led_7_seg_buffer[index_led_7_seg]);
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <led_7seg_run+0x48>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <led_7seg_run+0x4c>)
 80008a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fdd3 	bl	8000454 <display_led_7seg>
	//switch index after 500ms, index increase 1 and index assign 0 when index = 4;
	if(timer1_flag == 1)//each LED_7SEG run25ms-> 4LED = 1S
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <led_7seg_run+0x50>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10e      	bne.n	80008d4 <led_7seg_run+0x44>
	{
		index_led_7_seg= (index_led_7_seg+1)%4;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <led_7seg_run+0x48>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	425a      	negs	r2, r3
 80008be:	f003 0303 	and.w	r3, r3, #3
 80008c2:	f002 0203 	and.w	r2, r2, #3
 80008c6:	bf58      	it	pl
 80008c8:	4253      	negpl	r3, r2
 80008ca:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <led_7seg_run+0x48>)
 80008cc:	6013      	str	r3, [r2, #0]
		set_timer1(25);
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 fa46 	bl	8000d60 <set_timer1>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	20000098 	.word	0x20000098
 80008e0:	20000100 	.word	0x20000100

080008e4 <turn_on_traffic_led_1>:
 *      Author: Quoc Viet
 */

#include <led_traffic.h>

void turn_on_traffic_led_1(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <turn_on_traffic_led_1+0x80>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b0c      	cmp	r3, #12
 80008ee:	d026      	beq.n	800093e <turn_on_traffic_led_1+0x5a>
 80008f0:	2b0c      	cmp	r3, #12
 80008f2:	dc34      	bgt.n	800095e <turn_on_traffic_led_1+0x7a>
 80008f4:	2b0a      	cmp	r3, #10
 80008f6:	d002      	beq.n	80008fe <turn_on_traffic_led_1+0x1a>
 80008f8:	2b0b      	cmp	r3, #11
 80008fa:	d010      	beq.n	800091e <turn_on_traffic_led_1+0x3a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, RESET);
			break;
		default:
			break;
 80008fc:	e02f      	b.n	800095e <turn_on_traffic_led_1+0x7a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2101      	movs	r1, #1
 8000902:	4819      	ldr	r0, [pc, #100]	; (8000968 <turn_on_traffic_led_1+0x84>)
 8000904:	f001 f8bb 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2102      	movs	r1, #2
 800090c:	4816      	ldr	r0, [pc, #88]	; (8000968 <turn_on_traffic_led_1+0x84>)
 800090e:	f001 f8b6 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2104      	movs	r1, #4
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <turn_on_traffic_led_1+0x84>)
 8000918:	f001 f8b1 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 800091c:	e020      	b.n	8000960 <turn_on_traffic_led_1+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2101      	movs	r1, #1
 8000922:	4811      	ldr	r0, [pc, #68]	; (8000968 <turn_on_traffic_led_1+0x84>)
 8000924:	f001 f8ab 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2102      	movs	r1, #2
 800092c:	480e      	ldr	r0, [pc, #56]	; (8000968 <turn_on_traffic_led_1+0x84>)
 800092e:	f001 f8a6 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2104      	movs	r1, #4
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <turn_on_traffic_led_1+0x84>)
 8000938:	f001 f8a1 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 800093c:	e010      	b.n	8000960 <turn_on_traffic_led_1+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 800093e:	2201      	movs	r2, #1
 8000940:	2101      	movs	r1, #1
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <turn_on_traffic_led_1+0x84>)
 8000944:	f001 f89b 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <turn_on_traffic_led_1+0x84>)
 800094e:	f001 f896 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <turn_on_traffic_led_1+0x84>)
 8000958:	f001 f891 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 800095c:	e000      	b.n	8000960 <turn_on_traffic_led_1+0x7c>
			break;
 800095e:	bf00      	nop
	}
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000003c 	.word	0x2000003c
 8000968:	40010800 	.word	0x40010800

0800096c <turn_on_traffic_led_2>:
void turn_on_traffic_led_2(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <turn_on_traffic_led_2+0x80>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b0c      	cmp	r3, #12
 8000976:	d026      	beq.n	80009c6 <turn_on_traffic_led_2+0x5a>
 8000978:	2b0c      	cmp	r3, #12
 800097a:	dc34      	bgt.n	80009e6 <turn_on_traffic_led_2+0x7a>
 800097c:	2b0a      	cmp	r3, #10
 800097e:	d002      	beq.n	8000986 <turn_on_traffic_led_2+0x1a>
 8000980:	2b0b      	cmp	r3, #11
 8000982:	d010      	beq.n	80009a6 <turn_on_traffic_led_2+0x3a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, RESET);
			break;
		default:
			break;
 8000984:	e02f      	b.n	80009e6 <turn_on_traffic_led_2+0x7a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	4819      	ldr	r0, [pc, #100]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 800098c:	f001 f877 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	4816      	ldr	r0, [pc, #88]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 8000996:	f001 f872 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2120      	movs	r1, #32
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 80009a0:	f001 f86d 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 80009a4:	e020      	b.n	80009e8 <turn_on_traffic_led_2+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2108      	movs	r1, #8
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 80009ac:	f001 f867 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2110      	movs	r1, #16
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 80009b6:	f001 f862 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2120      	movs	r1, #32
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 80009c0:	f001 f85d 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 80009c4:	e010      	b.n	80009e8 <turn_on_traffic_led_2+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2108      	movs	r1, #8
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 80009cc:	f001 f857 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 80009d6:	f001 f852 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <turn_on_traffic_led_2+0x84>)
 80009e0:	f001 f84d 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 80009e4:	e000      	b.n	80009e8 <turn_on_traffic_led_2+0x7c>
			break;
 80009e6:	bf00      	nop
	}
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000040 	.word	0x20000040
 80009f0:	40010800 	.word	0x40010800

080009f4 <blinkind_led_traffic_1>:

void blinkind_led_traffic_1(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <blinkind_led_traffic_1+0x7c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b0c      	cmp	r3, #12
 80009fe:	d024      	beq.n	8000a4a <blinkind_led_traffic_1+0x56>
 8000a00:	2b0c      	cmp	r3, #12
 8000a02:	dc31      	bgt.n	8000a68 <blinkind_led_traffic_1+0x74>
 8000a04:	2b0a      	cmp	r3, #10
 8000a06:	d002      	beq.n	8000a0e <blinkind_led_traffic_1+0x1a>
 8000a08:	2b0b      	cmp	r3, #11
 8000a0a:	d00f      	beq.n	8000a2c <blinkind_led_traffic_1+0x38>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1_Pin);
			break;
		default:
			break;
 8000a0c:	e02c      	b.n	8000a68 <blinkind_led_traffic_1+0x74>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_1_Pin);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4818      	ldr	r0, [pc, #96]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a12:	f001 f84c 	bl	8001aae <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a1c:	f001 f82f 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2104      	movs	r1, #4
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a26:	f001 f82a 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 8000a2a:	e01e      	b.n	8000a6a <blinkind_led_traffic_1+0x76>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2104      	movs	r1, #4
 8000a30:	4810      	ldr	r0, [pc, #64]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a32:	f001 f824 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_1_Pin);
 8000a36:	2102      	movs	r1, #2
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a3a:	f001 f838 	bl	8001aae <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2101      	movs	r1, #1
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a44:	f001 f81b 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 8000a48:	e00f      	b.n	8000a6a <blinkind_led_traffic_1+0x76>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a50:	f001 f815 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2101      	movs	r1, #1
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a5a:	f001 f810 	bl	8001a7e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1_Pin);
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <blinkind_led_traffic_1+0x80>)
 8000a62:	f001 f824 	bl	8001aae <HAL_GPIO_TogglePin>
			break;
 8000a66:	e000      	b.n	8000a6a <blinkind_led_traffic_1+0x76>
			break;
 8000a68:	bf00      	nop
		}
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000003c 	.word	0x2000003c
 8000a74:	40010800 	.word	0x40010800

08000a78 <blinkind_led_traffic_2>:

void blinkind_led_traffic_2(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <blinkind_led_traffic_2+0x7c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b0c      	cmp	r3, #12
 8000a82:	d024      	beq.n	8000ace <blinkind_led_traffic_2+0x56>
 8000a84:	2b0c      	cmp	r3, #12
 8000a86:	dc31      	bgt.n	8000aec <blinkind_led_traffic_2+0x74>
 8000a88:	2b0a      	cmp	r3, #10
 8000a8a:	d002      	beq.n	8000a92 <blinkind_led_traffic_2+0x1a>
 8000a8c:	2b0b      	cmp	r3, #11
 8000a8e:	d00f      	beq.n	8000ab0 <blinkind_led_traffic_2+0x38>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2_Pin);
			break;
			default:
			break;
 8000a90:	e02c      	b.n	8000aec <blinkind_led_traffic_2+0x74>
				HAL_GPIO_TogglePin(GPIOA, LED_RED_2_Pin);
 8000a92:	2108      	movs	r1, #8
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000a96:	f001 f80a 	bl	8001aae <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	4816      	ldr	r0, [pc, #88]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000aa0:	f000 ffed 	bl	8001a7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000aaa:	f000 ffe8 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 8000aae:	e01e      	b.n	8000aee <blinkind_led_traffic_2+0x76>
				HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000ab6:	f000 ffe2 	bl	8001a7e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_2_Pin);
 8000aba:	2110      	movs	r1, #16
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000abe:	f000 fff6 	bl	8001aae <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000ac8:	f000 ffd9 	bl	8001a7e <HAL_GPIO_WritePin>
			break;
 8000acc:	e00f      	b.n	8000aee <blinkind_led_traffic_2+0x76>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000ad4:	f000 ffd3 	bl	8001a7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2108      	movs	r1, #8
 8000adc:	4806      	ldr	r0, [pc, #24]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000ade:	f000 ffce 	bl	8001a7e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2_Pin);
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <blinkind_led_traffic_2+0x80>)
 8000ae6:	f000 ffe2 	bl	8001aae <HAL_GPIO_TogglePin>
			break;
 8000aea:	e000      	b.n	8000aee <blinkind_led_traffic_2+0x76>
			break;
 8000aec:	bf00      	nop
		}
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000040 	.word	0x20000040
 8000af8:	40010800 	.word	0x40010800

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fcbc 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f818 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 f89e 	bl	8000c48 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b0c:	f000 f850 	bl	8000bb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <main+0x38>)
 8000b12:	f001 fc11 	bl	8002338 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  set_timer(3, 100);
 8000b16:	2164      	movs	r1, #100	; 0x64
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f907 	bl	8000d2c <set_timer>
  set_timer1(3);//4Led_7SEG
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f91e 	bl	8000d60 <set_timer1>
  while (1)
  {

	  fsm_for_button();
 8000b24:	f7ff fba6 	bl	8000274 <fsm_for_button>
	  led_7seg_run();
 8000b28:	f7ff feb2 	bl	8000890 <led_7seg_run>
	  fsm_system_run();
 8000b2c:	f000 faec 	bl	8001108 <fsm_system_run>
	  fsm_for_button();
 8000b30:	e7f8      	b.n	8000b24 <main+0x28>
 8000b32:	bf00      	nop
 8000b34:	20000104 	.word	0x20000104

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b090      	sub	sp, #64	; 0x40
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	2228      	movs	r2, #40	; 0x28
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 ffb2 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b62:	2310      	movs	r3, #16
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ffb6 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f8d1 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	230f      	movs	r3, #15
 8000b80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fa22 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 f8bd 	bl	8000d20 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3740      	adds	r7, #64	; 0x40
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000bd6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000be4:	2209      	movs	r2, #9
 8000be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000bf6:	f001 fb4f 	bl	8002298 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c00:	f000 f88e 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000c12:	f001 fce5 	bl	80025e0 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c1c:	f000 f880 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM2_Init+0x94>)
 8000c2e:	f001 feb1 	bl	8002994 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c38:	f000 f872 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000104 	.word	0x20000104

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000c92:	481b      	ldr	r0, [pc, #108]	; (8000d00 <MX_GPIO_Init+0xb8>)
 8000c94:	f000 fef3 	bl	8001a7e <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_7SEG_A_Pin|LED_7SEG_B_Pin
                          |LED_7SEG_C_Pin|LED_7SEG_D_Pin|LED_7SEG_E_Pin|LED_7SEG_F_Pin
                          |LED_7SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2178      	movs	r1, #120	; 0x78
 8000c9c:	4819      	ldr	r0, [pc, #100]	; (8000d04 <MX_GPIO_Init+0xbc>)
 8000c9e:	f000 feee 	bl	8001a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin LED_7SEG_A_Pin LED_7SEG_B_Pin
                           LED_7SEG_C_Pin LED_7SEG_D_Pin LED_7SEG_E_Pin LED_7SEG_F_Pin
                           LED_7SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000ca2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ca6:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_7SEG_A_Pin|LED_7SEG_B_Pin
                          |LED_7SEG_C_Pin|LED_7SEG_D_Pin|LED_7SEG_E_Pin|LED_7SEG_F_Pin
                          |LED_7SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_GPIO_Init+0xb8>)
 8000cbc:	f000 fd4e 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_GPIO_Init+0xbc>)
 8000cd4:	f000 fd42 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000cd8:	2378      	movs	r3, #120	; 0x78
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_GPIO_Init+0xbc>)
 8000cf0:	f000 fd34 	bl	800175c <HAL_GPIO_Init>

}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010800 	.word	0x40010800
 8000d04:	40010c00 	.word	0x40010c00

08000d08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	timer_run();
 8000d10:	f000 f880 	bl	8000e14 <timer_run>
	read_input();
 8000d14:	f7ff fa38 	bl	8000188 <read_input>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <set_timer>:
#include "software_timer.h"

int timer_counter[NUMBER_OF_TIMER] = {0};
int timer_flag[NUMBER_OF_TIMER] = {0};

void set_timer(int index, int duration){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <set_timer+0x2c>)
 8000d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	17db      	asrs	r3, r3, #31
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	4905      	ldr	r1, [pc, #20]	; (8000d5c <set_timer+0x30>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	66666667 	.word	0x66666667
 8000d5c:	200000ac 	.word	0x200000ac

08000d60 <set_timer1>:

int timer1_counter = 0;
int timer1_flag = 0;
void set_timer1(int duration){
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <set_timer1+0x20>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <set_timer1+0x24>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000fc 	.word	0x200000fc
 8000d84:	20000100 	.word	0x20000100

08000d88 <clear_timer>:

void clear_timer(int index){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <clear_timer+0x28>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2100      	movs	r1, #0
 8000d96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8000d9a:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <clear_timer+0x2c>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200000ac 	.word	0x200000ac
 8000db4:	200000d4 	.word	0x200000d4

08000db8 <get_time_of_counter>:

int get_time_of_counter(int index){
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	return timer_counter[index]*TIME_CYCLE;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <get_time_of_counter+0x24>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200000ac 	.word	0x200000ac

08000de0 <is_timer_timeout>:

int is_timer_timeout(int index){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <is_timer_timeout+0x30>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <is_timer_timeout+0x22>
		timer_flag[index] = 0;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <is_timer_timeout+0x30>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <is_timer_timeout+0x24>
	}
	return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200000d4 	.word	0x200000d4

08000e14 <timer_run>:
void timer_run(){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	e01c      	b.n	8000e5a <timer_run+0x46>
		if(timer_counter[i] > 0){
 8000e20:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <timer_run+0x78>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dd13      	ble.n	8000e54 <timer_run+0x40>
			timer_counter[i]--;
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <timer_run+0x78>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	4915      	ldr	r1, [pc, #84]	; (8000e8c <timer_run+0x78>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8000e3e:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <timer_run+0x78>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dc04      	bgt.n	8000e54 <timer_run+0x40>
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <timer_run+0x7c>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	dddf      	ble.n	8000e20 <timer_run+0xc>
		}
	}
	if (timer1_counter > 0){
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <timer_run+0x80>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	dd0b      	ble.n	8000e80 <timer_run+0x6c>
			timer1_counter--;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <timer_run+0x80>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <timer_run+0x80>)
 8000e70:	6013      	str	r3, [r2, #0]
			if (timer1_counter <= 0){
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <timer_run+0x80>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dc02      	bgt.n	8000e80 <timer_run+0x6c>
				timer1_flag = 1;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <timer_run+0x84>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000ac 	.word	0x200000ac
 8000e90:	200000d4 	.word	0x200000d4
 8000e94:	200000fc 	.word	0x200000fc
 8000e98:	20000100 	.word	0x20000100

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6193      	str	r3, [r2, #24]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_MspInit+0x60>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_MspInit+0x60>)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000

08000f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d113      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_TIM_Base_MspInit+0x44>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <HAL_TIM_Base_MspInit+0x44>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_TIM_Base_MspInit+0x44>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	201c      	movs	r0, #28
 8000f30:	f000 fbdd 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f34:	201c      	movs	r0, #28
 8000f36:	f000 fbf6 	bl	8001726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 fabb 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM2_IRQHandler+0x10>)
 8000f9e:	f001 fa17 	bl	80023d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000104 	.word	0x20000104

08000fac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <fsm_traffic_1_run>:


#include "traffic_fsm.h"


void fsm_traffic_1_run(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <fsm_traffic_1_run+0x98>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d02a      	beq.n	800101a <fsm_traffic_1_run+0x62>
 8000fc4:	2b0c      	cmp	r3, #12
 8000fc6:	dc3a      	bgt.n	800103e <fsm_traffic_1_run+0x86>
 8000fc8:	2b0a      	cmp	r3, #10
 8000fca:	d002      	beq.n	8000fd2 <fsm_traffic_1_run+0x1a>
 8000fcc:	2b0b      	cmp	r3, #11
 8000fce:	d012      	beq.n	8000ff6 <fsm_traffic_1_run+0x3e>
				state_led_traffic_1 = YELLOW;
				set_timer(4,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000fd0:	e035      	b.n	800103e <fsm_traffic_1_run+0x86>
			turn_on_traffic_led_1();
 8000fd2:	f7ff fc87 	bl	80008e4 <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 8000fd6:	2004      	movs	r0, #4
 8000fd8:	f7ff ff02 	bl	8000de0 <is_timer_timeout>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d02f      	beq.n	8001042 <fsm_traffic_1_run+0x8a>
				state_led_traffic_1 =GREEN;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <fsm_traffic_1_run+0x98>)
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_GREEN);
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <fsm_traffic_1_run+0x9c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	2004      	movs	r0, #4
 8000ff0:	f7ff fe9c 	bl	8000d2c <set_timer>
		break;
 8000ff4:	e025      	b.n	8001042 <fsm_traffic_1_run+0x8a>
			turn_on_traffic_led_1();
 8000ff6:	f7ff fc75 	bl	80008e4 <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f7ff fef0 	bl	8000de0 <is_timer_timeout>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d01f      	beq.n	8001046 <fsm_traffic_1_run+0x8e>
				state_led_traffic_1 = RED;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <fsm_traffic_1_run+0x98>)
 8001008:	220a      	movs	r2, #10
 800100a:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_RED);
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <fsm_traffic_1_run+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	2004      	movs	r0, #4
 8001014:	f7ff fe8a 	bl	8000d2c <set_timer>
		break;
 8001018:	e015      	b.n	8001046 <fsm_traffic_1_run+0x8e>
			turn_on_traffic_led_1();
 800101a:	f7ff fc63 	bl	80008e4 <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 800101e:	2004      	movs	r0, #4
 8001020:	f7ff fede 	bl	8000de0 <is_timer_timeout>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00f      	beq.n	800104a <fsm_traffic_1_run+0x92>
				state_led_traffic_1 = YELLOW;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <fsm_traffic_1_run+0x98>)
 800102c:	220b      	movs	r2, #11
 800102e:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_YELLOW);
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <fsm_traffic_1_run+0xa4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	2004      	movs	r0, #4
 8001038:	f7ff fe78 	bl	8000d2c <set_timer>
		break;
 800103c:	e005      	b.n	800104a <fsm_traffic_1_run+0x92>
		break;
 800103e:	bf00      	nop
 8001040:	e004      	b.n	800104c <fsm_traffic_1_run+0x94>
		break;
 8001042:	bf00      	nop
 8001044:	e002      	b.n	800104c <fsm_traffic_1_run+0x94>
		break;
 8001046:	bf00      	nop
 8001048:	e000      	b.n	800104c <fsm_traffic_1_run+0x94>
		break;
 800104a:	bf00      	nop
	}
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000003c 	.word	0x2000003c
 8001054:	2000004c 	.word	0x2000004c
 8001058:	20000044 	.word	0x20000044
 800105c:	20000048 	.word	0x20000048

08001060 <fsm_traffic_2_run>:


void fsm_traffic_2_run(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <fsm_traffic_2_run+0x98>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d02a      	beq.n	80010c2 <fsm_traffic_2_run+0x62>
 800106c:	2b0c      	cmp	r3, #12
 800106e:	dc3a      	bgt.n	80010e6 <fsm_traffic_2_run+0x86>
 8001070:	2b0a      	cmp	r3, #10
 8001072:	d002      	beq.n	800107a <fsm_traffic_2_run+0x1a>
 8001074:	2b0b      	cmp	r3, #11
 8001076:	d012      	beq.n	800109e <fsm_traffic_2_run+0x3e>
				state_led_traffic_2 = YELLOW;
				set_timer(5,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8001078:	e035      	b.n	80010e6 <fsm_traffic_2_run+0x86>
			turn_on_traffic_led_2();
 800107a:	f7ff fc77 	bl	800096c <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 800107e:	2005      	movs	r0, #5
 8001080:	f7ff feae 	bl	8000de0 <is_timer_timeout>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d02f      	beq.n	80010ea <fsm_traffic_2_run+0x8a>
				state_led_traffic_2 = GREEN;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <fsm_traffic_2_run+0x98>)
 800108c:	220c      	movs	r2, #12
 800108e:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_GREEN);
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <fsm_traffic_2_run+0x9c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	2005      	movs	r0, #5
 8001098:	f7ff fe48 	bl	8000d2c <set_timer>
		break;
 800109c:	e025      	b.n	80010ea <fsm_traffic_2_run+0x8a>
			turn_on_traffic_led_2();
 800109e:	f7ff fc65 	bl	800096c <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 80010a2:	2005      	movs	r0, #5
 80010a4:	f7ff fe9c 	bl	8000de0 <is_timer_timeout>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01f      	beq.n	80010ee <fsm_traffic_2_run+0x8e>
				state_led_traffic_2 = RED;
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <fsm_traffic_2_run+0x98>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_RED);
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <fsm_traffic_2_run+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2005      	movs	r0, #5
 80010bc:	f7ff fe36 	bl	8000d2c <set_timer>
		break;
 80010c0:	e015      	b.n	80010ee <fsm_traffic_2_run+0x8e>
			turn_on_traffic_led_2();
 80010c2:	f7ff fc53 	bl	800096c <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 80010c6:	2005      	movs	r0, #5
 80010c8:	f7ff fe8a 	bl	8000de0 <is_timer_timeout>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00f      	beq.n	80010f2 <fsm_traffic_2_run+0x92>
				state_led_traffic_2 = YELLOW;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <fsm_traffic_2_run+0x98>)
 80010d4:	220b      	movs	r2, #11
 80010d6:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_YELLOW);
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <fsm_traffic_2_run+0xa4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	2005      	movs	r0, #5
 80010e0:	f7ff fe24 	bl	8000d2c <set_timer>
		break;
 80010e4:	e005      	b.n	80010f2 <fsm_traffic_2_run+0x92>
		break;
 80010e6:	bf00      	nop
 80010e8:	e004      	b.n	80010f4 <fsm_traffic_2_run+0x94>
		break;
 80010ea:	bf00      	nop
 80010ec:	e002      	b.n	80010f4 <fsm_traffic_2_run+0x94>
		break;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <fsm_traffic_2_run+0x94>
		break;
 80010f2:	bf00      	nop
	}
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000040 	.word	0x20000040
 80010fc:	2000004c 	.word	0x2000004c
 8001100:	20000044 	.word	0x20000044
 8001104:	20000048 	.word	0x20000048

08001108 <fsm_system_run>:


void fsm_system_run(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	switch(mode){
 800110c:	4bbf      	ldr	r3, [pc, #764]	; (800140c <fsm_system_run+0x304>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b04      	cmp	r3, #4
 8001112:	f200 816f 	bhi.w	80013f4 <fsm_system_run+0x2ec>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <fsm_system_run+0x14>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001131 	.word	0x08001131
 8001120:	08001167 	.word	0x08001167
 8001124:	080011d3 	.word	0x080011d3
 8001128:	08001289 	.word	0x08001289
 800112c:	0800133d 	.word	0x0800133d
		case INIT_SYSTEM:

			state_led_traffic_1 = RED;
 8001130:	4bb7      	ldr	r3, [pc, #732]	; (8001410 <fsm_system_run+0x308>)
 8001132:	220a      	movs	r2, #10
 8001134:	601a      	str	r2, [r3, #0]
			state_led_traffic_2 = GREEN;
 8001136:	4bb7      	ldr	r3, [pc, #732]	; (8001414 <fsm_system_run+0x30c>)
 8001138:	220c      	movs	r2, #12
 800113a:	601a      	str	r2, [r3, #0]
			set_timer(3, 500);
 800113c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001140:	2003      	movs	r0, #3
 8001142:	f7ff fdf3 	bl	8000d2c <set_timer>
			set_timer(4, duration_time_of_RED);
 8001146:	4bb4      	ldr	r3, [pc, #720]	; (8001418 <fsm_system_run+0x310>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	2004      	movs	r0, #4
 800114e:	f7ff fded 	bl	8000d2c <set_timer>
			set_timer(5, duration_time_of_GREEN);
 8001152:	4bb2      	ldr	r3, [pc, #712]	; (800141c <fsm_system_run+0x314>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	2005      	movs	r0, #5
 800115a:	f7ff fde7 	bl	8000d2c <set_timer>
			//STATE STRANSITION
			mode = NORMAL_MODE;
 800115e:	4bab      	ldr	r3, [pc, #684]	; (800140c <fsm_system_run+0x304>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
		break;
 8001164:	e14f      	b.n	8001406 <fsm_system_run+0x2fe>
		case NORMAL_MODE:

			fsm_traffic_1_run();
 8001166:	f7ff ff27 	bl	8000fb8 <fsm_traffic_1_run>
			fsm_traffic_2_run();
 800116a:	f7ff ff79 	bl	8001060 <fsm_traffic_2_run>
			update_2_buffer_led_7seg_left(get_time_of_counter(4));
 800116e:	2004      	movs	r0, #4
 8001170:	f7ff fe22 	bl	8000db8 <get_time_of_counter>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fb2e 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(get_time_of_counter(5));
 800117c:	2005      	movs	r0, #5
 800117e:	f7ff fe1b 	bl	8000db8 <get_time_of_counter>
 8001182:	4603      	mov	r3, r0
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb55 	bl	8000834 <update_2_buffer_led_7seg_right>
			//STATE STRANSITION
			//button 0 is pressed,  NORMAl_MODE -> MODIFY_RED_MODE
			if(is_pressed(0)){
 800118a:	2000      	movs	r0, #0
 800118c:	f7fe ffde 	bl	800014c <is_pressed>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8130 	beq.w	80013f8 <fsm_system_run+0x2f0>
				clear_timer(4);
 8001198:	2004      	movs	r0, #4
 800119a:	f7ff fdf5 	bl	8000d88 <clear_timer>
				clear_timer(5);
 800119e:	2005      	movs	r0, #5
 80011a0:	f7ff fdf2 	bl	8000d88 <clear_timer>
				state_led_traffic_1 = RED;
 80011a4:	4b9a      	ldr	r3, [pc, #616]	; (8001410 <fsm_system_run+0x308>)
 80011a6:	220a      	movs	r2, #10
 80011a8:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = RED;
 80011aa:	4b9a      	ldr	r3, [pc, #616]	; (8001414 <fsm_system_run+0x30c>)
 80011ac:	220a      	movs	r2, #10
 80011ae:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 80011b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011b4:	2006      	movs	r0, #6
 80011b6:	f7ff fdb9 	bl	8000d2c <set_timer>
				turn_on_traffic_led_1();
 80011ba:	f7ff fb93 	bl	80008e4 <turn_on_traffic_led_1>
				turn_on_traffic_led_2();
 80011be:	f7ff fbd5 	bl	800096c <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_RED;
 80011c2:	4b95      	ldr	r3, [pc, #596]	; (8001418 <fsm_system_run+0x310>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a96      	ldr	r2, [pc, #600]	; (8001420 <fsm_system_run+0x318>)
 80011c8:	6013      	str	r3, [r2, #0]
				mode = MODIFY_RED_MODE;
 80011ca:	4b90      	ldr	r3, [pc, #576]	; (800140c <fsm_system_run+0x304>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	601a      	str	r2, [r3, #0]
			}
		break;
 80011d0:	e112      	b.n	80013f8 <fsm_system_run+0x2f0>
		case MODIFY_RED_MODE:

			update_2_buffer_led_7seg_left(mode*1000);
 80011d2:	4b8e      	ldr	r3, [pc, #568]	; (800140c <fsm_system_run+0x304>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fafa 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(buffer_duration_time);
 80011e4:	4b8e      	ldr	r3, [pc, #568]	; (8001420 <fsm_system_run+0x318>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fb23 	bl	8000834 <update_2_buffer_led_7seg_right>
			//blinking every 500ms
			if(is_timer_timeout(6)){
 80011ee:	2006      	movs	r0, #6
 80011f0:	f7ff fdf6 	bl	8000de0 <is_timer_timeout>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <fsm_system_run+0x104>
				blinkind_led_traffic_1();
 80011fa:	f7ff fbfb 	bl	80009f4 <blinkind_led_traffic_1>
				blinkind_led_traffic_2();
 80011fe:	f7ff fc3b 	bl	8000a78 <blinkind_led_traffic_2>
				set_timer(6, 500);
 8001202:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001206:	2006      	movs	r0, #6
 8001208:	f7ff fd90 	bl	8000d2c <set_timer>
			}
			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(1)){
 800120c:	2001      	movs	r0, #1
 800120e:	f7fe ff9d 	bl	800014c <is_pressed>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00f      	beq.n	8001238 <fsm_system_run+0x130>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <fsm_system_run+0x318>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001220:	4b80      	ldr	r3, [pc, #512]	; (8001424 <fsm_system_run+0x31c>)
 8001222:	fb83 1302 	smull	r1, r3, r3, r2
 8001226:	1359      	asrs	r1, r3, #13
 8001228:	17d3      	asrs	r3, r2, #31
 800122a:	1acb      	subs	r3, r1, r3
 800122c:	497e      	ldr	r1, [pc, #504]	; (8001428 <fsm_system_run+0x320>)
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	4a7a      	ldr	r2, [pc, #488]	; (8001420 <fsm_system_run+0x318>)
 8001236:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(2)){
 8001238:	2002      	movs	r0, #2
 800123a:	f7fe ff87 	bl	800014c <is_pressed>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <fsm_system_run+0x144>
				duration_time_of_RED = buffer_duration_time;
 8001244:	4b76      	ldr	r3, [pc, #472]	; (8001420 <fsm_system_run+0x318>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a73      	ldr	r2, [pc, #460]	; (8001418 <fsm_system_run+0x310>)
 800124a:	6013      	str	r3, [r2, #0]
			}
			//STATE STRANSITION
			//button 0 is pressed, MODIFY_RED_MODE -> MODIFY_YELLOW_MODE
			if(is_pressed(0)){
 800124c:	2000      	movs	r0, #0
 800124e:	f7fe ff7d 	bl	800014c <is_pressed>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80d1 	beq.w	80013fc <fsm_system_run+0x2f4>
				state_led_traffic_1 = YELLOW;
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <fsm_system_run+0x308>)
 800125c:	220b      	movs	r2, #11
 800125e:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = YELLOW;
 8001260:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <fsm_system_run+0x30c>)
 8001262:	220b      	movs	r2, #11
 8001264:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 8001266:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800126a:	2006      	movs	r0, #6
 800126c:	f7ff fd5e 	bl	8000d2c <set_timer>
				turn_on_traffic_led_1();
 8001270:	f7ff fb38 	bl	80008e4 <turn_on_traffic_led_1>
				turn_on_traffic_led_2();
 8001274:	f7ff fb7a 	bl	800096c <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_YELLOW;
 8001278:	4b6c      	ldr	r3, [pc, #432]	; (800142c <fsm_system_run+0x324>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a68      	ldr	r2, [pc, #416]	; (8001420 <fsm_system_run+0x318>)
 800127e:	6013      	str	r3, [r2, #0]
				mode = MODIFY_YELLOW_MODE;
 8001280:	4b62      	ldr	r3, [pc, #392]	; (800140c <fsm_system_run+0x304>)
 8001282:	2203      	movs	r2, #3
 8001284:	601a      	str	r2, [r3, #0]
			}
		break;
 8001286:	e0b9      	b.n	80013fc <fsm_system_run+0x2f4>
		case MODIFY_YELLOW_MODE:

			update_2_buffer_led_7seg_left(mode*1000);
 8001288:	4b60      	ldr	r3, [pc, #384]	; (800140c <fsm_system_run+0x304>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9f 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(buffer_duration_time);
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <fsm_system_run+0x318>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fac8 	bl	8000834 <update_2_buffer_led_7seg_right>
			//blinking every 500ms
			if(is_timer_timeout(6)){
 80012a4:	2006      	movs	r0, #6
 80012a6:	f7ff fd9b 	bl	8000de0 <is_timer_timeout>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <fsm_system_run+0x1ba>
				blinkind_led_traffic_1();
 80012b0:	f7ff fba0 	bl	80009f4 <blinkind_led_traffic_1>
				blinkind_led_traffic_2();
 80012b4:	f7ff fbe0 	bl	8000a78 <blinkind_led_traffic_2>
				set_timer(6, 500);
 80012b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012bc:	2006      	movs	r0, #6
 80012be:	f7ff fd35 	bl	8000d2c <set_timer>
			}
			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(1)){
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7fe ff42 	bl	800014c <is_pressed>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00f      	beq.n	80012ee <fsm_system_run+0x1e6>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <fsm_system_run+0x318>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80012d6:	4b53      	ldr	r3, [pc, #332]	; (8001424 <fsm_system_run+0x31c>)
 80012d8:	fb83 1302 	smull	r1, r3, r3, r2
 80012dc:	1359      	asrs	r1, r3, #13
 80012de:	17d3      	asrs	r3, r2, #31
 80012e0:	1acb      	subs	r3, r1, r3
 80012e2:	4951      	ldr	r1, [pc, #324]	; (8001428 <fsm_system_run+0x320>)
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <fsm_system_run+0x318>)
 80012ec:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(2)){
 80012ee:	2002      	movs	r0, #2
 80012f0:	f7fe ff2c 	bl	800014c <is_pressed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <fsm_system_run+0x1fa>
				duration_time_of_YELLOW = buffer_duration_time;
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <fsm_system_run+0x318>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a4b      	ldr	r2, [pc, #300]	; (800142c <fsm_system_run+0x324>)
 8001300:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 0 is pressed,MODIFY_YELLOW_MODE  ->  MODIFY_GREEN_MODE
			if(is_pressed(0)){
 8001302:	2000      	movs	r0, #0
 8001304:	f7fe ff22 	bl	800014c <is_pressed>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d078      	beq.n	8001400 <fsm_system_run+0x2f8>
				state_led_traffic_1 = GREEN;
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <fsm_system_run+0x308>)
 8001310:	220c      	movs	r2, #12
 8001312:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = GREEN;
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <fsm_system_run+0x30c>)
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 800131a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800131e:	2006      	movs	r0, #6
 8001320:	f7ff fd04 	bl	8000d2c <set_timer>
				turn_on_traffic_led_1();
 8001324:	f7ff fade 	bl	80008e4 <turn_on_traffic_led_1>
				turn_on_traffic_led_2();
 8001328:	f7ff fb20 	bl	800096c <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_GREEN;
 800132c:	4b3b      	ldr	r3, [pc, #236]	; (800141c <fsm_system_run+0x314>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a3b      	ldr	r2, [pc, #236]	; (8001420 <fsm_system_run+0x318>)
 8001332:	6013      	str	r3, [r2, #0]
				mode = MODIFY_GREEN_MODE;
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <fsm_system_run+0x304>)
 8001336:	2204      	movs	r2, #4
 8001338:	601a      	str	r2, [r3, #0]
			}
		break;
 800133a:	e061      	b.n	8001400 <fsm_system_run+0x2f8>
		case MODIFY_GREEN_MODE:

			update_2_buffer_led_7seg_left(mode*1000);
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <fsm_system_run+0x304>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fa45 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(buffer_duration_time);
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <fsm_system_run+0x318>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fa6e 	bl	8000834 <update_2_buffer_led_7seg_right>
			//blinking every 500ms
			if(is_timer_timeout(6)){
 8001358:	2006      	movs	r0, #6
 800135a:	f7ff fd41 	bl	8000de0 <is_timer_timeout>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <fsm_system_run+0x26e>
				blinkind_led_traffic_1();
 8001364:	f7ff fb46 	bl	80009f4 <blinkind_led_traffic_1>
				blinkind_led_traffic_2();
 8001368:	f7ff fb86 	bl	8000a78 <blinkind_led_traffic_2>
				set_timer(6, 500);
 800136c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff fcdb 	bl	8000d2c <set_timer>
			}
			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(1)){
 8001376:	2001      	movs	r0, #1
 8001378:	f7fe fee8 	bl	800014c <is_pressed>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00f      	beq.n	80013a2 <fsm_system_run+0x29a>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <fsm_system_run+0x318>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <fsm_system_run+0x31c>)
 800138c:	fb83 1302 	smull	r1, r3, r3, r2
 8001390:	1359      	asrs	r1, r3, #13
 8001392:	17d3      	asrs	r3, r2, #31
 8001394:	1acb      	subs	r3, r1, r3
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <fsm_system_run+0x320>)
 8001398:	fb01 f303 	mul.w	r3, r1, r3
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <fsm_system_run+0x318>)
 80013a0:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(2)){
 80013a2:	2002      	movs	r0, #2
 80013a4:	f7fe fed2 	bl	800014c <is_pressed>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <fsm_system_run+0x2ae>
				duration_time_of_GREEN = buffer_duration_time;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <fsm_system_run+0x318>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1a      	ldr	r2, [pc, #104]	; (800141c <fsm_system_run+0x314>)
 80013b4:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 0 is pressed, MODIFY_GREEN_MODE -> NORMAL_MODE
			if(is_pressed(0)){
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7fe fec8 	bl	800014c <is_pressed>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d020      	beq.n	8001404 <fsm_system_run+0x2fc>
				clear_timer(6);
 80013c2:	2006      	movs	r0, #6
 80013c4:	f7ff fce0 	bl	8000d88 <clear_timer>
				state_led_traffic_1 = RED;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <fsm_system_run+0x308>)
 80013ca:	220a      	movs	r2, #10
 80013cc:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = GREEN;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <fsm_system_run+0x30c>)
 80013d0:	220c      	movs	r2, #12
 80013d2:	601a      	str	r2, [r3, #0]
				set_timer(4, duration_time_of_RED);
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <fsm_system_run+0x310>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	2004      	movs	r0, #4
 80013dc:	f7ff fca6 	bl	8000d2c <set_timer>
				set_timer(5, duration_time_of_GREEN);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <fsm_system_run+0x314>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	2005      	movs	r0, #5
 80013e8:	f7ff fca0 	bl	8000d2c <set_timer>
				mode = NORMAL_MODE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <fsm_system_run+0x304>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
			}
		break;
 80013f2:	e007      	b.n	8001404 <fsm_system_run+0x2fc>
		default:
		break;
 80013f4:	bf00      	nop
 80013f6:	e006      	b.n	8001406 <fsm_system_run+0x2fe>
		break;
 80013f8:	bf00      	nop
 80013fa:	e004      	b.n	8001406 <fsm_system_run+0x2fe>
		break;
 80013fc:	bf00      	nop
 80013fe:	e002      	b.n	8001406 <fsm_system_run+0x2fe>
		break;
 8001400:	bf00      	nop
 8001402:	e000      	b.n	8001406 <fsm_system_run+0x2fe>
		break;
 8001404:	bf00      	nop
	}
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000094 	.word	0x20000094
 8001410:	2000003c 	.word	0x2000003c
 8001414:	20000040 	.word	0x20000040
 8001418:	20000044 	.word	0x20000044
 800141c:	2000004c 	.word	0x2000004c
 8001420:	20000050 	.word	0x20000050
 8001424:	14f8b589 	.word	0x14f8b589
 8001428:	000186a0 	.word	0x000186a0
 800142c:	20000048 	.word	0x20000048

08001430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001430:	f7ff fdbc 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001436:	490c      	ldr	r1, [pc, #48]	; (8001468 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <LoopFillZerobss+0x16>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800144c:	4c09      	ldr	r4, [pc, #36]	; (8001474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f001 fb05 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145e:	f7ff fb4d 	bl	8000afc <main>
  bx lr
 8001462:	4770      	bx	lr
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800146c:	08002b04 	.word	0x08002b04
  ldr r2, =_sbss
 8001470:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001474:	20000150 	.word	0x20000150

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x28>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x28>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f923 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fd00 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f93b 	bl	8001742 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f903 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000054 	.word	0x20000054
 8001500:	2000005c 	.word	0x2000005c
 8001504:	20000058 	.word	0x20000058

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x1c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a03      	ldr	r2, [pc, #12]	; (8001528 <HAL_IncTick+0x20>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	2000005c 	.word	0x2000005c
 8001528:	2000014c 	.word	0x2000014c

0800152c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <HAL_GetTick+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	2000014c 	.word	0x2000014c

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4906      	ldr	r1, [pc, #24]	; (80015d8 <__NVIC_EnableIRQ+0x34>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff90 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff2d 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff42 	bl	8001588 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff90 	bl	8001630 <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5f 	bl	80015dc <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff35 	bl	80015a4 <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b08b      	sub	sp, #44	; 0x2c
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e148      	b.n	8001a02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001770:	2201      	movs	r2, #1
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8137 	bne.w	80019fc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4aa3      	ldr	r2, [pc, #652]	; (8001a20 <HAL_GPIO_Init+0x2c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d05e      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 8001798:	4aa1      	ldr	r2, [pc, #644]	; (8001a20 <HAL_GPIO_Init+0x2c4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d875      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 800179e:	4aa1      	ldr	r2, [pc, #644]	; (8001a24 <HAL_GPIO_Init+0x2c8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d058      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017a4:	4a9f      	ldr	r2, [pc, #636]	; (8001a24 <HAL_GPIO_Init+0x2c8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d86f      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017aa:	4a9f      	ldr	r2, [pc, #636]	; (8001a28 <HAL_GPIO_Init+0x2cc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d052      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017b0:	4a9d      	ldr	r2, [pc, #628]	; (8001a28 <HAL_GPIO_Init+0x2cc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d869      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017b6:	4a9d      	ldr	r2, [pc, #628]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04c      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017bc:	4a9b      	ldr	r2, [pc, #620]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d863      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017c2:	4a9b      	ldr	r2, [pc, #620]	; (8001a30 <HAL_GPIO_Init+0x2d4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d046      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017c8:	4a99      	ldr	r2, [pc, #612]	; (8001a30 <HAL_GPIO_Init+0x2d4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d85d      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d82a      	bhi.n	8001828 <HAL_GPIO_Init+0xcc>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d859      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_GPIO_Init+0x80>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001831 	.word	0x08001831
 80017e4:	08001843 	.word	0x08001843
 80017e8:	08001885 	.word	0x08001885
 80017ec:	0800188b 	.word	0x0800188b
 80017f0:	0800188b 	.word	0x0800188b
 80017f4:	0800188b 	.word	0x0800188b
 80017f8:	0800188b 	.word	0x0800188b
 80017fc:	0800188b 	.word	0x0800188b
 8001800:	0800188b 	.word	0x0800188b
 8001804:	0800188b 	.word	0x0800188b
 8001808:	0800188b 	.word	0x0800188b
 800180c:	0800188b 	.word	0x0800188b
 8001810:	0800188b 	.word	0x0800188b
 8001814:	0800188b 	.word	0x0800188b
 8001818:	0800188b 	.word	0x0800188b
 800181c:	0800188b 	.word	0x0800188b
 8001820:	08001839 	.word	0x08001839
 8001824:	0800184d 	.word	0x0800184d
 8001828:	4a82      	ldr	r2, [pc, #520]	; (8001a34 <HAL_GPIO_Init+0x2d8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182e:	e02c      	b.n	800188a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e029      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	e024      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	3308      	adds	r3, #8
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e01f      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	330c      	adds	r3, #12
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e01a      	b.n	800188c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185e:	2304      	movs	r3, #4
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e013      	b.n	800188c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	611a      	str	r2, [r3, #16]
          break;
 8001876:	e009      	b.n	800188c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	615a      	str	r2, [r3, #20]
          break;
 8001882:	e003      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x130>
          break;
 800188a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2bff      	cmp	r3, #255	; 0xff
 8001890:	d801      	bhi.n	8001896 <HAL_GPIO_Init+0x13a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	e001      	b.n	800189a <HAL_GPIO_Init+0x13e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3304      	adds	r3, #4
 800189a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d802      	bhi.n	80018a8 <HAL_GPIO_Init+0x14c>
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x152>
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3b08      	subs	r3, #8
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	210f      	movs	r1, #15
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	431a      	orrs	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8090 	beq.w	80019fc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_GPIO_Init+0x2dc>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a55      	ldr	r2, [pc, #340]	; (8001a38 <HAL_GPIO_Init+0x2dc>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_GPIO_Init+0x2dc>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f4:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_GPIO_Init+0x2e0>)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00d      	beq.n	800193c <HAL_GPIO_Init+0x1e0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a48      	ldr	r2, [pc, #288]	; (8001a44 <HAL_GPIO_Init+0x2e8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0x1dc>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_GPIO_Init+0x1d8>
 8001930:	2302      	movs	r3, #2
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1e2>
 8001934:	2303      	movs	r3, #3
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1e2>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1e2>
 800193c:	2300      	movs	r3, #0
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194e:	493b      	ldr	r1, [pc, #236]	; (8001a3c <HAL_GPIO_Init+0x2e0>)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4933      	ldr	r1, [pc, #204]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	492d      	ldr	r1, [pc, #180]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4929      	ldr	r1, [pc, #164]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4923      	ldr	r1, [pc, #140]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	491f      	ldr	r1, [pc, #124]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4919      	ldr	r1, [pc, #100]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4915      	ldr	r1, [pc, #84]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3301      	adds	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f aeaf 	bne.w	8001770 <HAL_GPIO_Init+0x14>
  }
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	372c      	adds	r7, #44	; 0x2c
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	10320000 	.word	0x10320000
 8001a24:	10310000 	.word	0x10310000
 8001a28:	10220000 	.word	0x10220000
 8001a2c:	10210000 	.word	0x10210000
 8001a30:	10120000 	.word	0x10120000
 8001a34:	10110000 	.word	0x10110000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	40010800 	.word	0x40010800
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	807b      	strh	r3, [r7, #2]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8e:	787b      	ldrb	r3, [r7, #1]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a94:	887a      	ldrh	r2, [r7, #2]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a9a:	e003      	b.n	8001aa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	041a      	lsls	r2, r3, #16
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	611a      	str	r2, [r3, #16]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	041a      	lsls	r2, r3, #16
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	400b      	ands	r3, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	611a      	str	r2, [r3, #16]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e26c      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8087 	beq.w	8001c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b0c:	4b8f      	ldr	r3, [pc, #572]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d112      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d10b      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x12c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d168      	bne.n	8001c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e246      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x76>
 8001b48:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a7f      	ldr	r2, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e02e      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7a      	ldr	r2, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a77      	ldr	r2, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0xbc>
 8001b82:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a71      	ldr	r2, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6a      	ldr	r2, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a67      	ldr	r2, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fcb6 	bl	800152c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcb2 	bl	800152c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1fa      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe4>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fca2 	bl	800152c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fc9e 	bl	800152c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1e6      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x10c>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1ba      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4939      	ldr	r1, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e03a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fc57 	bl	800152c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff fc53 	bl	800152c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e19b      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4927      	ldr	r1, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fc36 	bl	800152c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fc32 	bl	800152c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e17a      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03a      	beq.n	8001d64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d019      	beq.n	8001d2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc16 	bl	800152c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc12 	bl	800152c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e15a      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 fa9a 	bl	800225c <RCC_Delay>
 8001d28:	e01c      	b.n	8001d64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7ff fbfc 	bl	800152c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	e00f      	b.n	8001d58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fbf8 	bl	800152c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d908      	bls.n	8001d58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e140      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	42420000 	.word	0x42420000
 8001d54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b9e      	ldr	r3, [pc, #632]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e9      	bne.n	8001d38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a6 	beq.w	8001ebe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b97      	ldr	r3, [pc, #604]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b94      	ldr	r3, [pc, #592]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a93      	ldr	r2, [pc, #588]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]
 8001d8e:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a8a      	ldr	r2, [pc, #552]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fbb9 	bl	800152c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7ff fbb5 	bl	800152c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0fd      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x312>
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	e02d      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001dfa:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a75      	ldr	r2, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	e01c      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x356>
 8001e1c:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a6c      	ldr	r2, [pc, #432]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e00b      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a63      	ldr	r2, [pc, #396]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb69 	bl	800152c <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fb65 	bl	800152c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0ab      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ee      	beq.n	8001e5e <HAL_RCC_OscConfig+0x37e>
 8001e80:	e014      	b.n	8001eac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fb53 	bl	800152c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fb4f 	bl	800152c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e095      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ee      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8081 	beq.w	8001fca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d061      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d146      	bne.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x4fc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fb23 	bl	800152c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7ff fb1f 	bl	800152c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e067      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efc:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	492d      	ldr	r1, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a19      	ldr	r1, [r3, #32]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	430b      	orrs	r3, r1
 8001f36:	4927      	ldr	r1, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x4fc>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff faf3 	bl	800152c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff faef 	bl	800152c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e037      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46a>
 8001f68:	e02f      	b.n	8001fca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_RCC_OscConfig+0x4fc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fadc 	bl	800152c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff fad8 	bl	800152c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e020      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x498>
 8001f96:	e018      	b.n	8001fca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e013      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	42420060 	.word	0x42420060

08001fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0d0      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4965      	ldr	r1, [pc, #404]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0b8      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002046:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800205e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	494d      	ldr	r1, [pc, #308]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d040      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d115      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e07f      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e073      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06b      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7ff fa2c 	bl	800152c <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7ff fa28 	bl	800152c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e053      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d210      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4922      	ldr	r1, [pc, #136]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e032      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4916      	ldr	r1, [pc, #88]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	490e      	ldr	r1, [pc, #56]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216e:	f000 f821 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002172:	4602      	mov	r2, r0
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	490a      	ldr	r1, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1cc>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1d0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f98a 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08002ad8 	.word	0x08002ad8
 80021ac:	20000054 	.word	0x20000054
 80021b0:	20000058 	.word	0x20000058

080021b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x30>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x36>
 80021e2:	e027      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 80021e6:	613b      	str	r3, [r7, #16]
      break;
 80021e8:	e027      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0c5b      	lsrs	r3, r3, #17
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e004      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	613b      	str	r3, [r7, #16]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 8002236:	613b      	str	r3, [r7, #16]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	693b      	ldr	r3, [r7, #16]
}
 800223c:	4618      	mov	r0, r3
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	007a1200 	.word	0x007a1200
 8002250:	08002ae8 	.word	0x08002ae8
 8002254:	08002af8 	.word	0x08002af8
 8002258:	003d0900 	.word	0x003d0900

0800225c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <RCC_Delay+0x34>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <RCC_Delay+0x38>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0a5b      	lsrs	r3, r3, #9
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002278:	bf00      	nop
  }
  while (Delay --);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	60fa      	str	r2, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <RCC_Delay+0x1c>
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000054 	.word	0x20000054
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e041      	b.n	800232e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe1e 	bl	8000f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3304      	adds	r3, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f000 fa6e 	bl	80027b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d001      	beq.n	8002350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e035      	b.n	80023bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_TIM_Base_Start_IT+0x90>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_TIM_Base_Start_IT+0x4e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d004      	beq.n	8002386 <HAL_TIM_Base_Start_IT+0x4e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_TIM_Base_Start_IT+0x94>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d111      	bne.n	80023aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d010      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a8:	e007      	b.n	80023ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40012c00 	.word	0x40012c00
 80023cc:	40000400 	.word	0x40000400

080023d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d122      	bne.n	800242c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d11b      	bne.n	800242c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0202 	mvn.w	r2, #2
 80023fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f9b4 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f9a7 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f9b6 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b04      	cmp	r3, #4
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0204 	mvn.w	r2, #4
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f98a 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f97d 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f98c 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b08      	cmp	r3, #8
 800248c:	d122      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d11b      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0208 	mvn.w	r2, #8
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2204      	movs	r2, #4
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f960 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f953 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f962 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d122      	bne.n	8002528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d11b      	bne.n	8002528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0210 	mvn.w	r2, #16
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2208      	movs	r2, #8
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f936 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f929 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f938 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0201 	mvn.w	r2, #1
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fbda 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b80      	cmp	r3, #128	; 0x80
 8002560:	d10e      	bne.n	8002580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d107      	bne.n	8002580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa6b 	bl	8002a56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d10e      	bne.n	80025ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d107      	bne.n	80025ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8fc 	bl	80027a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d107      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0220 	mvn.w	r2, #32
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa36 	bl	8002a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x1c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0b4      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x186>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002634:	d03e      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263a:	f200 8087 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	f000 8086 	beq.w	8002752 <HAL_TIM_ConfigClockSource+0x172>
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264a:	d87f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800264c:	2b70      	cmp	r3, #112	; 0x70
 800264e:	d01a      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0xa6>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d87b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 8002654:	2b60      	cmp	r3, #96	; 0x60
 8002656:	d050      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0x11a>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d877      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800265c:	2b50      	cmp	r3, #80	; 0x50
 800265e:	d03c      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xfa>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d873      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d058      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x13a>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d86f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800266c:	2b30      	cmp	r3, #48	; 0x30
 800266e:	d064      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d86b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 8002674:	2b20      	cmp	r3, #32
 8002676:	d060      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d867      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002680:	2b10      	cmp	r3, #16
 8002682:	d05a      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002684:	e062      	b.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f000 f95e 	bl	8002956 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	609a      	str	r2, [r3, #8]
      break;
 80026b2:	e04f      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f000 f947 	bl	8002956 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e03c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f000 f8be 	bl	8002868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2150      	movs	r1, #80	; 0x50
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f915 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 80026f8:	e02c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f000 f8dc 	bl	80028c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2160      	movs	r1, #96	; 0x60
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f905 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002718:	e01c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 f89e 	bl	8002868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2140      	movs	r1, #64	; 0x40
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f8f5 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002738:	e00c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 f8ec 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 800274a:	e003      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e000      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a25      	ldr	r2, [pc, #148]	; (8002860 <TIM_Base_SetConfig+0xa8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <TIM_Base_SetConfig+0x28>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d6:	d003      	beq.n	80027e0 <TIM_Base_SetConfig+0x28>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <TIM_Base_SetConfig+0xac>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d108      	bne.n	80027f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <TIM_Base_SetConfig+0xa8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0x52>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0x52>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a17      	ldr	r2, [pc, #92]	; (8002864 <TIM_Base_SetConfig+0xac>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d108      	bne.n	800281c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <TIM_Base_SetConfig+0xa8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d103      	bne.n	8002850 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	615a      	str	r2, [r3, #20]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012c00 	.word	0x40012c00
 8002864:	40000400 	.word	0x40000400

08002868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f023 0201 	bic.w	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 030a 	bic.w	r3, r3, #10
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	621a      	str	r2, [r3, #32]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0210 	bic.w	r2, r3, #16
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002900:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	621a      	str	r2, [r3, #32]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	f043 0307 	orr.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002970:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	021a      	lsls	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e041      	b.n	8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d004      	beq.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10c      	bne.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400

08002a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	2600      	movs	r6, #0
 8002a6c:	4d0c      	ldr	r5, [pc, #48]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6e:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a70:	1b64      	subs	r4, r4, r5
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	42a6      	cmp	r6, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	f000 f822 	bl	8002ac0 <_init>
 8002a7c:	2600      	movs	r6, #0
 8002a7e:	4d0a      	ldr	r5, [pc, #40]	; (8002aa8 <__libc_init_array+0x40>)
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <__libc_init_array+0x44>)
 8002a82:	1b64      	subs	r4, r4, r5
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	42a6      	cmp	r6, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a90:	4798      	blx	r3
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9a:	4798      	blx	r3
 8002a9c:	3601      	adds	r6, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08002afc 	.word	0x08002afc
 8002aa4:	08002afc 	.word	0x08002afc
 8002aa8:	08002afc 	.word	0x08002afc
 8002aac:	08002b00 	.word	0x08002b00

08002ab0 <memset>:
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4402      	add	r2, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
